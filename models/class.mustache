const jsf = require('json-schema-faker');
const faker = require('faker');

const database = require('.{{{sqlitePath}}}')('{{dbName}}')

jsf.extend('faker', () => faker);

const schema{{classTitle}} = require('../schemas/Schema-{{classTitle}}.json');

class {{classTitle}} {
    constructor(id, {{constructorArguments}}) {
        this.id = id
        {{#classConstructor}} 
        this.{{name}} = {{name}};
        {{/classConstructor}}

        {{#classEnumerables}} 
        Object.defineProperty(this, '{{name}}', { enumerable: false });
        {{/classEnumerables}}
        Object.defineProperty(this, id, { enumerable: false, writable: true } );
    }

    static create() {
        return Object.assign(new {{classTitle}}(), jsf.generate(schema{{classTitle}}));
    }

    static all(callback) {
        database.where("SELECT * FROM {{classTitle}}", [], {{classTitle}}, callback)
    }

    static get(id, callback) {
        database.get("SELECT * FROM {{classTitle}} WHERE id = ?", [id], {{classTitle}}, callback)
    }

    static delete(id, callback) {
        database.run("DELETE FROM {{classTitle}} WHERE id = ?", [id], callback)
    }

    save(callback) {
        if (this.id) {
            database.run(`UPDATE {{classTitle}} SET {{{updateColumns}}} WHERE id = ?`, [{{thisColumns}}, this.id], callback);
        } else{
            database.run(`INSERT INTO {{classTitle}} ({{constructorArguments}})
            VALUES ({{interrogationSigns}})`, [{{thisColumns}}], callback);
        }
    }

}


module.exports = {{classTitle}}