const express = require('express');
const router = express.Router();
const { presentationModeToHtmlType, columnConstraintToHtmlAttrs } = require(__basedir + '/utils/utils.js');

{{#schemas}}
const {{title}} = require(__basedir + '/Models/{{title}}.js');
const {{title}}Schema = require(__basedir + '/schemas/Schema-{{title}}.json');
router.get('/{{title}}', function (req, res) {
    {{title}}.all((rows) => {
        res.render('list', {
            title: '{{title}}',
            columns: Object.keys(new {{title}}()),
            rows: rows.map((r) => ({
                rowId: '{{title}}_' + r.id,
                properties: Object.keys(r).map((key) => r[key]),
                actions: [
                    {
                        link: './{{title}}/Details/' + r.id,
                        image: { src: '../../images/read.png', alt: 'read' },
                        tooltip: 'Details',
                    },
                    {
                        link: './{{title}}/Edit/' + r.id,
                        image: { src: '../../images/edit.png', alt: 'edit' },
                        tooltip: 'Edit',
                    },
                    {
                        link: '#',
                        image: {
                            src: '../../images/delete.png',
                            alt: 'delete',
                        },
                        tooltip: 'Delete',
                        events: [
                            {
                                name: 'onclick',
                                function: 'remove',
                                args: r.id,
                            },
                        ],
                    },
                ],
            })),
        });
    });
});

router.get('/{{title}}/Details/:id', function (req, res) {
    {{title}}.get(req.params.id, function (row) {
        res.render('details', {
            title: '{{title}}',
            properties: Object.getOwnPropertyNames(row)
                .filter((prop) => {{title}}Schema.properties.hasOwnProperty(prop))
                .map((prop) => ({
                    name: prop,
                    value: row[prop],
                })),
            references: Object.getOwnPropertyNames(row)
                .filter((prop) =>
                    {{title}}Schema.references.find(
                        (ref) => `${ref.model}_id`.toLowerCase() === prop
                    )
                )
                .map((prop) =>
                    {{title}}Schema.references.find(
                        (ref) => `${ref.model}_id`.toLowerCase() === prop
                    )
                )
                .map((ref) => ({
                    label: ref.label,
                    model: ref.model,
                    values:
                        ref.relation === 'M-M'
                            ? '{{title}}/' + req.params.id
                            : row[(ref.model + '_id').toLowerCase()],
                    isManyToMany: ref.relation === 'M-M',
                })),
            get hasReferences() {
                return this.references.length > 0;
            },
        });
    });
});

router.get('/{{title}}/Insert', function (req, res) {
    res.render('insert', {
        title: '{{title}}',
        properties: Object.getOwnPropertyNames(new {{title}}())
            .filter((prop) => {{title}}Schema.properties.hasOwnProperty(prop))
            .map((prop) => ({
                type: presentationModeToHtmlType(
                    {{title}}Schema.properties[prop].presentationMode,
                    {{title}}Schema.properties[prop].type
                ),
                required: {{title}}Schema.required.includes(prop),
                attrs: columnConstraintToHtmlAttrs({{title}}Schema.properties[prop]),
                name: prop,
            })),
        references: {{title}}Schema.references.map((ref) => ({
            name: `${ref.model}_id`.toLowerCase(),
            label: ref.label,
            model: ref.model,
            isManyToMany: ref.relation === 'M-M',
        })),
        get hasReferences() {
            return this.references.length > 0;
        },
    });
});

router.get('/{{title}}/Edit/:id', function (req, res) {
    {{title}}.get(req.params.id, function (row) {
        res.render('edit', {
            title: '{{title}}',
            id: req.params.id,
            properties: Object.getOwnPropertyNames(row)
                .filter((prop) => {{title}}Schema.properties.hasOwnProperty(prop))
                .map((prop) => ({
                    type: presentationModeToHtmlType(
                        {{title}}Schema.properties[prop].presentationMode,
                        {{title}}Schema.properties[prop].type
                    ),
                    required: {{title}}Schema.required.includes(prop),
                    attrs: columnConstraintToHtmlAttrs(
                        {{title}}Schema.properties[prop]
                    ),
                    name: prop,
                    value: row[prop],
                })),
            references: Object.getOwnPropertyNames(row)
                .filter((prop) =>
                    {{title}}Schema.references.find(
                        (ref) => `${ref.model}_id`.toLowerCase() === prop
                    )
                )
                .map((prop) =>
                    {{title}}Schema.references.find(
                        (ref) => `${ref.model}_id`.toLowerCase() === prop
                    )
                )
                .map((ref) => ({
                    name: `${ref.model}_id`.toLowerCase(),
                    label: ref.label,
                    model: ref.model,
                    values:
                        ref.relation === 'M-M'
                            ? '{{title}}/' + req.params.id
                            : row[(ref.model + '_id').toLowerCase()],
                    isManyToMany: ref.relation === 'M-M',
                })),
            get hasReferences() {
                return this.references.length > 0;
            },
        });
    });
});

{{/schemas}}
module.exports = router;